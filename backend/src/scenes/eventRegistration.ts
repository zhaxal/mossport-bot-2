import dotenv from "dotenv";
import { ObjectId } from "mongodb";
import { Markup, Scenes } from "telegraf";
import randomNumber from "random-number-csprng";

import { MyContext } from "../types/bot";
import { eventInfoCol, subscribersCol, userCol } from "../database";
import delay from "../utils/delay";

dotenv.config();

const hostname = process.env.HOSTNAME;

export const eventRegistrationWizard = new Scenes.WizardScene<MyContext>(
  "eventRegistrationWizard",
  async (ctx) => {
    const userId = ctx.from?.id;
    const eventId = ctx.wizard.state.eventId;

    const subscriber = await subscribersCol.findOne({
      telegramId: userId,
    });

    const user = await userCol.findOne({
      subscriberId: subscriber?._id,
      eventId: new ObjectId(eventId),
    });

    if (user) {
      ctx.scene.enter("mainMenuWizard", {
        eventId,
      });
      return;
    }

    ctx.reply(
      "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤, —Ç–æ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. üòÉ –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é.üñä"
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      ctx.wizard.state.lastName = ctx.message.text;
      ctx.reply("–ê —Ç–µ–ø–µ—Ä—å –ò–º—è.üñä");
      return ctx.wizard.next();
    } else {
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
    }
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      ctx.wizard.state.firstName = ctx.message.text;
      ctx.reply(
        "–û—Ç–ª–∏—á–Ω–æ!üëçüèº\n–ï—â–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üì±",
        Markup.keyboard([
          Markup.button.contactRequest("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
        ]).resize()
      );
      return ctx.wizard.next();
    } else {
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
    }
  },
  async (ctx) => {
    if (ctx.message && "contact" in ctx.message) {
      ctx.wizard.state.phoneNumber = ctx.message.contact.phone_number;
      await ctx.reply(
        "–ü—Ä–æ—á—Ç–∏ —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –∏ –ü–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.üìù",
        Markup.removeKeyboard()
      );

      const eventId = ctx.wizard.state.eventId;

      const event = await eventInfoCol.findOne({
        _id: new ObjectId(eventId),
      });

      if (event?.rulesLink) {
        await ctx.replyWithDocument(`${hostname}${event.rulesLink}`);
      } else {
        await ctx.reply("–ü—Ä–∞–≤–∏–ª —É—á–∞—Å—Ç–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.");
      }

      if (event?.policyLink) {
        await ctx.replyWithDocument(`${hostname}${event.policyLink}`);
      } else {
        await ctx.reply("–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç.");
      }

      await ctx.reply(
        "–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ö–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Ç—ã –ø—Ä–æ—á–µ–ª –∏—Ö –∏ —Å–æ–≥–ª–∞—Å–µ–Ω.‚úÖ",
        Markup.inlineKeyboard([
          Markup.button.callback("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "confirm"),
          Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å", "cancel"),
        ])
      );

      return ctx.wizard.next();
    } else {
      ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç.",
        Markup.keyboard([
          Markup.button.contactRequest("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
        ]).resize()
      );
    }
  },
  async (ctx) => {}
);

eventRegistrationWizard.action("confirm", async (ctx) => {
  try {
    const { firstName, lastName, phoneNumber, eventId } = ctx.wizard.state;
    const userId = ctx.from?.id;

    const subscriber = await subscribersCol.findOne({
      telegramId: userId,
    });

    if (!subscriber) {
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
      );
      return ctx.scene.leave();
    }

    const shortId = await randomNumber(100000, 999999);

    if (!firstName || !lastName || !phoneNumber || !eventId) {
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
      );
      return ctx.scene.leave();
    }

    await userCol.insertOne({
      subscriberId: subscriber._id,
      firstName,
      lastName,
      phoneNumber,
      shortId,
      eventId: new ObjectId(eventId),
    });

    const event = await eventInfoCol.findOne({
      _id: new ObjectId(eventId),
    });

    if (!event) {
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
      );
      await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.");
      return ctx.scene.leave();
    }
    await ctx.reply(
      `–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤, –µ—Å–ª–∏ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –£–¥–∞—á–∏! ü´∂üèº`
    );

    await delay(5000);

    await ctx.reply(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.üìú\n\n${event?.schedule}`);

    await delay(5000);

    if (event?.mapLink) {
      await ctx.reply(`–ò –Ω–µ –∑–∞–±—É–¥—å –∫–∞—Ä—Ç—É!üìç`);
      await ctx.replyWithDocument(`${hostname}${event.mapLink}`);
      await delay(5000);
    }

    await ctx.reply(
      "–ö–∞—Ä—Ç—É, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —É—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ –º–µ–Ω—é.‚¨á"
    );
    await delay(5000);

    if (event.partnerMessage) {
      await ctx.reply(event.partnerMessage);
      await delay(5000);
    }
    if (event.partnerMessage2) await ctx.reply(event.partnerMessage2);

    await ctx.answerCbQuery("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");

    await ctx.editMessageReplyMarkup({
      inline_keyboard: [],
    });

    ctx.scene.enter("mainMenuWizard", {
      eventId: event._id.toString(),
    });
  } catch (error) {
    console.error(error);
    ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

eventRegistrationWizard.action("cancel", async (ctx) => {
  ctx.answerCbQuery("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");

  await ctx.editMessageReplyMarkup({
    inline_keyboard: [],
  });

  return ctx.scene.leave();
});
