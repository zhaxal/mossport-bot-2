import dotenv from "dotenv";
import { ObjectId } from "mongodb";
import { Markup, Scenes } from "telegraf";

import { MyContext } from "../types/bot";
import { eventInfoCol, subscribersCol, userCol } from "../database";

dotenv.config();

const hostname = process.env.HOSTNAME || `https://mossport.info`;

export const mainMenuWizard = new Scenes.WizardScene<MyContext>(
  "mainMenuWizard",
  async (ctx) => {
    const userId = ctx.from?.id;
    const eventId = ctx.wizard.state.eventId;

    const user = await userCol.findOne({
      userId: userId,
      eventId: new ObjectId(eventId),
    });

    if (!user) {
      ctx.scene.enter("registrationWizard");
      return;
    }

    await ctx.reply(
      "–ö–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é:",
      Markup.keyboard([
        ["üî¢ –ú–æ–π –∫–æ–¥", "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"],
        ["üó∫Ô∏è –ö–∞—Ä—Ç–∞", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"],
        ["üìú –£—Å–ª–æ–≤–∏—è", "üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"],
      ])
        .oneTime(false)
        .resize()
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      const userId = ctx.from?.id;
      const eventId = ctx.wizard.state.eventId;

      const event = await eventInfoCol.findOne({
        _id: new ObjectId(eventId),
      });

      const subscriber = await subscribersCol.findOne({
        telegramId: userId,
      });

      const user = await userCol.findOne({
        subscriberId: subscriber?._id,
        eventId: new ObjectId(eventId),
      });

      if (!user) {
        ctx.scene.enter("registrationWizard");
        return;
      }

      switch (ctx.message.text) {
        case "üî¢ –ú–æ–π –∫–æ–¥":
          ctx.reply(
            `–¢–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ - –ø–æ–∫–∞–∂–∏ –µ–≥–æ –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª: ${user.shortId}`
          );
          break;
        case "üó∫Ô∏è –ö–∞—Ä—Ç–∞":
          if (event?.mapLink) {
            ctx.replyWithDocument(`${hostname}${event.mapLink}`);
          } else {
            ctx.reply("–ö–∞—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ—Ç.");
          }
          break;
        case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
          if (event?.schedule) {
            ctx.reply(`${event.schedule}`);
          } else {
            ctx.reply("–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.");
          }
          break;
        case "üìú –£—Å–ª–æ–≤–∏—è":
          if (event?.rulesLink) {
            ctx.replyWithDocument(`${hostname}${event.rulesLink}`);
          } else {
            ctx.reply("–£—Å–ª–æ–≤–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.");
          }
          break;
        case "üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
          if (event?.policyLink) {
            ctx.replyWithDocument(`${hostname}${event.policyLink}`);
          } else {
            ctx.reply("–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç.");
          }
          break;
        default:
          ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.");
          break;
      }
    } else {
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.");
    }
  }
);
