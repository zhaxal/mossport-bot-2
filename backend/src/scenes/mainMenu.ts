import dotenv from "dotenv";
import { ObjectId } from "mongodb";
import { Markup, Scenes } from "telegraf";

import { MyContext } from "../types/bot";
import { eventInfoCol, subscribersCol, userCol } from "../database";

dotenv.config();

const hostname = process.env.HOSTNAME || `https://mossport.info`;

export const mainMenuWizard = new Scenes.WizardScene<MyContext>(
  "mainMenuWizard",
  async (ctx) => {
    const subscriberId = ctx.from?.id;
    const eventId = ctx.wizard.state.eventId;

    const subscriber = await subscribersCol.findOne({
      telegramId: subscriberId,
    });

    const user = await userCol.findOne({
      subscriberId: subscriber?._id,
      eventId: new ObjectId(eventId),
    });

    if (!user) {
      ctx.scene.enter("eventRegistrationWizard");
      return;
    }

    await ctx.reply(
      "–ö–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é:",
      Markup.keyboard([
        ["üî¢ –ú–æ–π –∫–æ–¥", "üó∫Ô∏è –ö–∞—Ä—Ç–∞"],
        ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üìú –£—Å–ª–æ–≤–∏—è"],
        ["üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "üìã –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"],
      ])
        .oneTime(false)
        .resize()
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (ctx.message && "text" in ctx.message) {
      const userId = ctx.from?.id;
      const eventId = ctx.wizard.state.eventId;

      const event = await eventInfoCol.findOne({
        _id: new ObjectId(eventId),
      });

      const subscriber = await subscribersCol.findOne({
        telegramId: userId,
      });

      const user = await userCol.findOne({
        subscriberId: subscriber?._id,
        eventId: new ObjectId(eventId),
      });

      if (!user) {
        ctx.scene.enter("eventRegistrationWizard");
        return;
      }

      switch (ctx.message.text) {
        case "üî¢ –ú–æ–π –∫–æ–¥":
          ctx.reply(
            `–¢–≤–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: ${user.shortId}`
          );
          break;
        case "üó∫Ô∏è –ö–∞—Ä—Ç–∞":
          if (event?.mapLink) {
            ctx.replyWithDocument(`${hostname}${event.mapLink}`);
          } else {
            ctx.reply("–ö–∞—Ä—Ç—ã –ø–æ–∫–∞ –Ω–µ—Ç.");
          }
          break;
        case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
          if (event?.schedule) {
            ctx.reply(`${event.schedule}`);
          } else {
            ctx.reply("–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.");
          }
          break;
        case "üìú –£—Å–ª–æ–≤–∏—è":
          if (event?.rulesLink) {
            ctx.replyWithDocument(`${hostname}${event.rulesLink}`);
          } else {
            ctx.reply("–£—Å–ª–æ–≤–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.");
          }
          break;
        case "üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
          if (event?.policyLink) {
            ctx.replyWithDocument(`${hostname}${event.policyLink}`);
          } else {
            ctx.reply("–ü–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç.");
          }
          break;
        case "üìã –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π":
          const events = await eventInfoCol
            .find({
              status: "active",
            })
            .toArray();

          if (events.length === 0) {
            await ctx.reply(
              `–ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name}!\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç, –Ω–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ, –º—ã –Ω–∞–ø–∏—à–µ–º —Ç–µ–±–µ –∑–¥–µ—Å—å!`
            );
            return;
          }

          const keyboard = Markup.inlineKeyboard(
            events.map((event) => [
              Markup.button.callback(event.title, `event_${event._id}`),
            ])
          );

          await ctx.reply(
            `–ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name}!\n–û—Ç–∫—Ä—ã—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞:`,
            keyboard
          );

          const message = await ctx.reply(
            "–£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            Markup.removeKeyboard()
          );

          if (message.message_id && ctx.chat?.id) {
            await ctx.telegram.deleteMessage(ctx.chat.id, message.message_id);
          }

          await ctx.scene.leave();
          break;

        default:
          ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.");
          break;
      }
    } else if (ctx.callbackQuery && "data" in ctx.callbackQuery) {
      const action = ctx.callbackQuery.data;
      const match = /event_(.+)/.exec(action);

      if (match) {
        const eventId = match[1];

        const event = await eventInfoCol.findOne({
          _id: new ObjectId(eventId),
        });

        if (event) {
          await ctx.answerCbQuery("–í—ã–±—Ä–∞–Ω –∏–≤–µ–Ω—Ç.");
          await ctx.scene.enter("eventRegistrationWizard", {
            eventId: event._id.toString(),
          });
          await ctx.deleteMessage();
        } else {
          await ctx.answerCbQuery("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∏–≤–µ–Ω—Ç.");
          await ctx.reply("–ò–≤–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–≤–µ–Ω—Ç.");
        }
      }
    } else {
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.");
    }
  }
);
